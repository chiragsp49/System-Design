package cachedebouncing;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Semaphore;
import java.util.concurrent.atomic.AtomicInteger;

public class Server {
	static ConcurrentHashMap<Integer, Employee> cache = new ConcurrentHashMap<Integer, Employee>();
	static AtomicInteger counter = new AtomicInteger(0);
	static int numberOfRequestsForServer = 10;
	static int keyToFetch = 2;

	public static void main(String[] args) {
		 cache.put(2, new Employee());
		//fetchWithOutCacheDebounce();
		fetchWithCacheDebounce();
		System.out.println(counter);

	}
	
	public static void fetchWithCacheDebounce() {

		
		final Semaphore lock1 = new Semaphore(1);
		Runnable task = new Runnable() {

			public void run() {
				try {
				
					if (cache.containsKey(keyToFetch)) {
						Employee emp = cache.get(keyToFetch);
					}else {
						counter.getAndAdd(1);
						lock1.acquire();
						fetchEmployeeDetails(keyToFetch);
						lock1.release();
					}
					
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
		};
		
		Thread[] threads = new Thread[numberOfRequestsForServer];
		for(int i=0;i<numberOfRequestsForServer;i++) {
			threads[i]=new Thread(task);
			threads[i].start();
		}
		
		for(int i=0;i<numberOfRequestsForServer;i++) {
			try {
				threads[i].join();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	public static void fetchWithOutCacheDebounce() {		
		Runnable task = new Runnable() {	
			public void run() {
				try {
					counter.getAndAdd(1);
					if (cache.containsKey(keyToFetch)) {
						Employee emp = cache.get(keyToFetch);
					}else {
						fetchEmployeeDetails(keyToFetch);
					}
					
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
		};
		
		Thread[] threads = new Thread[numberOfRequestsForServer];
		for(int i=0;i<numberOfRequestsForServer;i++) {
			threads[i]=new Thread(task);
			threads[i].start();
		}
		
        for (int i = 0; i < numberOfRequestsForServer; i++) {
            try {
                threads[i].join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
		
	}

	public static Employee fetchEmployeeDetails(int key) throws ClassNotFoundException, SQLException {
		counter.getAndAdd(1);
		Employee emp = fetchFromDB(key);
		cache.put(key, emp);
		return emp;
		
	}

	public static Employee fetchFromDB(int key) throws ClassNotFoundException, SQLException {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/office", "root", "admin");
			Statement statement = conn.createStatement();
			ResultSet rst = statement.executeQuery("SELECT * from employees where id = " + key);

			Employee emp = new Employee();
			while (rst.next()) {
				emp.setId(rst.getInt("id"));
				emp.setDept(rst.getString("dept"));
				emp.setName(rst.getString("name"));
			}
			return emp;
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

			throw new ClassNotFoundException(e.getMessage());

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new SQLException(e.getMessage());

		}

	}
}



//for (int i = 0; i < numberOfRequestsForServer; i++) {
//
//final Semaphore lock1 = new Semaphore(1);
//Thread server1 = new Thread(new Runnable() {
//	public void run() {
//		try {
//			if (cache.containsKey(keyToFetch)) {
//				Employee emp = cache.get(keyToFetch);
//			}else {
//				lock1.acquire();
//				fetchEmployeeDetails(keyToFetch);
//				lock1.release();
//			}
//			
//		} catch (ClassNotFoundException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (SQLException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//
//	}
//});
//server1.start();
//}
//
//for (int i = 0; i < numberOfRequestsForServer; i++) {
//final Semaphore lock2 = new Semaphore(1);
//Thread server2 = new Thread(new Runnable() {
//	
//	public void run() {
//
//		try {
//			if (cache.containsKey(keyToFetch)) {
//				Employee emp = cache.get(keyToFetch);
//			}else {
//				lock2.acquire();
//				fetchEmployeeDetails(keyToFetch);
//				lock2.release();
//			}
//		} catch (ClassNotFoundException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (SQLException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//	}
//});
//server2.start();
//}
//
//for (int i = 0; i < numberOfRequestsForServer; i++) {
//final Semaphore lock3 = new Semaphore(1);
//Thread server3 = new Thread(new Runnable() {
//	public void run() {
//		try {
//			if (cache.containsKey(keyToFetch)) {
//				Employee emp = cache.get(keyToFetch);
//			}else {
//				lock3.acquire();
//				fetchEmployeeDetails(keyToFetch);
//				lock3.release();
//			}
//			
//		} catch (ClassNotFoundException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (SQLException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//
//	}
//});
//server3.start();
//}
